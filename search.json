[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "",
    "text": "\\[\n\\begin{cases}\n\\frac{x^{\\lambda} - 1}{\\lambda} &\\quad \\lambda \\neq 0 \\\\\n\\log x &\\quad \\lambda = 0\n\\end{cases}\n\\]\nThe denominator serves to normalize the transformation and preserve the original direction of the effect (the sign is flipped when \\(\\lambda &lt; 0\\)). In application, we may only care about the numerator (e.g. when it suggests using “speed” instead of “time”.)\n\n\n\n\nusing BoxCox\nusing CairoMakie\nusing Random\nCairoMakie.activate!(; type=\"svg\")\n\nx = abs2.(randn(MersenneTwister(42), 1000))\nlet f = Figure()\n    ax = Axis(f[1,1]; xlabel=\"x\", ylabel=\"density\")\n    density!(ax, x)\n    ax = Axis(f[1,2]; xlabel=\"theoretical quantiles\", ylabel=\"observed values\")\n    qqnorm!(ax, x)\n    colsize!(f.layout, 1, Aspect(1, 1.0))\n    colsize!(f.layout, 2, Aspect(1, 1.0))\n    resize_to_layout!(f)\n    f\nend\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbc = fit(BoxCoxTransformation, x)\n\nBox-Cox transformation\n\nestimated λ: 0.2073\nresultant transformation:\n\n y^0.2 - 1\n-----------\n    0.2\n\n\n\n\n\n\n\n\n\n\n\n\n\nMakie extension\n\n\n\nIf an appropriate Makie backend is loaded, then you can also do diagnostic plots.\n\n\n\nboxcoxplot(bc)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nbc.(x)'\n\n1×1000 adjoint(::Vector{Float64}) with eltype Float64:\n -1.04197  -1.37758  -3.74249  -1.89776  …  -3.3449  -0.295085  -1.06768\n\n\n\nlet f = Figure(; size=(800, 300)), bcx = bc.(x)\n    ax = Axis(f[1,1]; xlabel=\"x\", ylabel=\"density\")\n    density!(ax, bcx)\n    ax = Axis(f[1,2]; xlabel=\"theoretical quantiles\", ylabel=\"observed values\")\n    qqnorm!(ax, bcx; qqline=:fitrobust)\n    colsize!(f.layout, 1, Aspect(1, 1.0))\n    colsize!(f.layout, 2, Aspect(1, 1.0))\n    resize_to_layout!(f)\n    f\nend"
  },
  {
    "objectID": "index.html#boxcox",
    "href": "index.html#boxcox",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "",
    "text": "\\[\n\\begin{cases}\n\\frac{x^{\\lambda} - 1}{\\lambda} &\\quad \\lambda \\neq 0 \\\\\n\\log x &\\quad \\lambda = 0\n\\end{cases}\n\\]\nThe denominator serves to normalize the transformation and preserve the original direction of the effect (the sign is flipped when \\(\\lambda &lt; 0\\)). In application, we may only care about the numerator (e.g. when it suggests using “speed” instead of “time”.)"
  },
  {
    "objectID": "index.html#example-square-of-a-normal-distribution",
    "href": "index.html#example-square-of-a-normal-distribution",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "",
    "text": "using BoxCox\nusing CairoMakie\nusing Random\nCairoMakie.activate!(; type=\"svg\")\n\nx = abs2.(randn(MersenneTwister(42), 1000))\nlet f = Figure()\n    ax = Axis(f[1,1]; xlabel=\"x\", ylabel=\"density\")\n    density!(ax, x)\n    ax = Axis(f[1,2]; xlabel=\"theoretical quantiles\", ylabel=\"observed values\")\n    qqnorm!(ax, x)\n    colsize!(f.layout, 1, Aspect(1, 1.0))\n    colsize!(f.layout, 2, Aspect(1, 1.0))\n    resize_to_layout!(f)\n    f\nend"
  },
  {
    "objectID": "index.html#fitting-the-transformation",
    "href": "index.html#fitting-the-transformation",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "",
    "text": "bc = fit(BoxCoxTransformation, x)\n\nBox-Cox transformation\n\nestimated λ: 0.2073\nresultant transformation:\n\n y^0.2 - 1\n-----------\n    0.2"
  },
  {
    "objectID": "index.html#examining-the-fitted-transformation",
    "href": "index.html#examining-the-fitted-transformation",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "",
    "text": "Makie extension\n\n\n\nIf an appropriate Makie backend is loaded, then you can also do diagnostic plots.\n\n\n\nboxcoxplot(bc)"
  },
  {
    "objectID": "index.html#applying-the-fitted-transformation",
    "href": "index.html#applying-the-fitted-transformation",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "",
    "text": "bc.(x)'\n\n1×1000 adjoint(::Vector{Float64}) with eltype Float64:\n -1.04197  -1.37758  -3.74249  -1.89776  …  -3.3449  -0.295085  -1.06768\n\n\n\nlet f = Figure(; size=(800, 300)), bcx = bc.(x)\n    ax = Axis(f[1,1]; xlabel=\"x\", ylabel=\"density\")\n    density!(ax, bcx)\n    ax = Axis(f[1,2]; xlabel=\"theoretical quantiles\", ylabel=\"observed values\")\n    qqnorm!(ax, bcx; qqline=:fitrobust)\n    colsize!(f.layout, 1, Aspect(1, 1.0))\n    colsize!(f.layout, 2, Aspect(1, 1.0))\n    resize_to_layout!(f)\n    f\nend"
  },
  {
    "objectID": "index.html#conditional-distritbutionn-transforming-the-response-of-a-regression-model",
    "href": "index.html#conditional-distritbutionn-transforming-the-response-of-a-regression-model",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "Conditional distritbutionn: transforming the response of a regression model",
    "text": "Conditional distritbutionn: transforming the response of a regression model\n\nOften"
  },
  {
    "objectID": "index.html#linear-regression",
    "href": "index.html#linear-regression",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "Linear Regression",
    "text": "Linear Regression\n\n\n\n\n\n\nStatsModels extension\n\n\n\nIf StatsModels.jl is loaded (even indirectly via e.g. GLM.jl), then you can also use the @formula macro to speciy the regression model."
  },
  {
    "objectID": "index.html#mixed-model",
    "href": "index.html#mixed-model",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "Mixed Model",
    "text": "Mixed Model"
  },
  {
    "objectID": "presentation.html#boxcox",
    "href": "presentation.html#boxcox",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "Box & Cox (1964)",
    "text": "Box & Cox (1964)\n\\[\n\\begin{cases}\n\\frac{x^{\\lambda} - 1}{\\lambda} &\\quad \\lambda \\neq 0 \\\\\n\\log x &\\quad \\lambda = 0\n\\end{cases}\n\\]\nThe denominator serves to normalize the transformation and preserve the original direction of the effect (the sign is flipped when \\(\\lambda &lt; 0\\)). In application, we may only care about the numerator (e.g. when it suggests using “speed” instead of “time”.)"
  },
  {
    "objectID": "presentation.html#example-square-of-a-normal-distribution",
    "href": "presentation.html#example-square-of-a-normal-distribution",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "Example: Square of a Normal Distribution",
    "text": "Example: Square of a Normal Distribution"
  },
  {
    "objectID": "presentation.html#fitting-the-transformation",
    "href": "presentation.html#fitting-the-transformation",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "Fitting the transformation",
    "text": "Fitting the transformation\n\n\n\nbc = fit(BoxCoxTransformation, x)\n\nBox-Cox transformation\n\nestimated λ: 0.2073\nresultant transformation:\n\n y^0.2 - 1\n-----------\n    0.2"
  },
  {
    "objectID": "presentation.html#examining-the-fitted-transformation",
    "href": "presentation.html#examining-the-fitted-transformation",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "Examining the fitted transformation",
    "text": "Examining the fitted transformation\n\n\n\n\n\n\n\nMakie extension\n\n\nIf an appropriate Makie backend is loaded, then you can also do diagnostic plots."
  },
  {
    "objectID": "presentation.html#applying-the-fitted-transformation",
    "href": "presentation.html#applying-the-fitted-transformation",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "Applying the fitted transformation",
    "text": "Applying the fitted transformation\n\nbc.(x)'\n\n1×1000 adjoint(::Vector{Float64}) with eltype Float64:\n -1.04197  -1.37758  -3.74249  -1.89776  …  -3.3449  -0.295085  -1.06768"
  },
  {
    "objectID": "presentation.html#conditional-distritbutionn-transforming-the-response-of-a-regression-model",
    "href": "presentation.html#conditional-distritbutionn-transforming-the-response-of-a-regression-model",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "Conditional distritbutionn: transforming the response of a regression model",
    "text": "Conditional distritbutionn: transforming the response of a regression model\n\nOften"
  },
  {
    "objectID": "presentation.html#linear-regression",
    "href": "presentation.html#linear-regression",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "Linear Regression",
    "text": "Linear Regression\n\n\n\n\n\n\n\nStatsModels extension\n\n\nIf StatsModels.jl is loaded (even indirectly via e.g. GLM.jl), then you can also use the @formula macro to speciy the regression model."
  },
  {
    "objectID": "presentation.html#mixed-model",
    "href": "presentation.html#mixed-model",
    "title": "BoxCox.jl – A lightweight package with nice extensions",
    "section": "Mixed Model",
    "text": "Mixed Model"
  }
]